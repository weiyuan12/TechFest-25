services:

  app:
    build:
      context: ./
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    # The depends_on directive only guarantees the container starts first, not that the service inside is ready.
    depends_on:
      mongodb:
        condition: service_healthy
    container_name: "backend"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://root:secret@mongodb:27017/user?authSource=admin # @mongodb instead of localhost
    networks:
      - app-network

  mongodb:
    image: 'mongo:latest'
    container_name: "mongodb"
    environment:
      - MONGO_INITDB_DATABASE=user
      - MONGO_INITDB_ROOT_PASSWORD=secret
      - MONGO_INITDB_ROOT_USERNAME=root
    ports:
      - '27017:27017'
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb:27017/user --quiet
      interval: 200s
      timeout: 10s
      retries: 5
      start_period: 40s

  mongo-seed:
    image: mongo:latest
    depends_on:
      - mongodb
    volumes:
      - ./data-seed:/data
    command: >
      bash -c '
        set -e;
        echo "Waiting for MongoDB to be ready...";
        until mongosh --host mongodb --port 27017 -u root -p secret --authenticationDatabase admin --eval "print(\"waited for connection\")"; do
          sleep 2;
        done;
        echo "MongoDB is ready.";

        echo "Dropping existing database and creating a new one...";
        mongosh --host mongodb --port 27017 -u root -p secret --authenticationDatabase admin --eval "
          use user;
          db.dropDatabase();
        "

        JSON_FILES=(
          "user.queries.json"
        )

        for file in "$${JSON_FILES[@]}"; do
          echo "Importing $$file...";
          collection=$$(echo "$$file" | sed "s/shopping_platform\\.\(.*\)\.json/\\1/");
          mongoimport --host mongodb --port 27017 -u root -p secret \
            --authenticationDatabase admin --db user --collection "$$collection" \
            --file /data/"$$file" --jsonArray;
        done;

        echo "Import completed.";
      '
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
